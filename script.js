'use strict';

//------------------------------------------------------DOM VARIABLES------------------------------------------------------------------------
const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');

//------------------------------------------------------GLOBAL VARIABLES------------------------------------------------------------------------
const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
let map;
let mapEvent;


// GEOLOCATION API - API that gets users approximate location; API takes 2 callback functions 
navigator.geolocation.getCurrentPosition( 

    // 1st Callback function IF SUCCESSFUL then run this code  
    (location) => {
    console.log(location); // Prints GeolocationPositionÂ {coords: GeolocationCoordinates, timestamp: 1625786061859} which is the location object
    const {latitude} = location.coords; // Destructuring of latitude key from object
    const {longitude} = location.coords; // Destructuring of longitude key from object
    console.log(`https://www.google.com/maps/@${latitude},${longitude},14z`); // Prints this link in console and then right click it to "open in new tab" and this will take you directly to Google Maps

const coords = [latitude, longitude]; // Creation of array which includes the latitude and longitude variables that were destuctured above.

// LEAFLET CODE - https://leafletjs.com/reference-1.7.1.html - Code to put markers and display map
map = L.map('map').setView(coords, 13); // Pass in coords variable created in line of code above which is the array that contains are current location latitude and longitude; The 13 is the view number. The lower the number the more zoomed out and the higher the number the more zoomed in the map is

L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
}).addTo(map);

// Handles Clicks on Map
map.on('click', (mapE) => { // map.on function just like event listener in Javascript.
        mapEvent = mapE; // Upon clicking anywhere on map mapE will be an object generated by the map.on function that we will then set to the global variable called mapEvent so that the display marker event listener can gain access to this object that was generated from clicking on the map.
        form.classList.remove('hidden');
        inputDistance.focus(); // Puts focus (blinking cursor) on the Distance input field
    })
}, 

//2nd Callback function if NOT successful then run this code
() => {
    console.log(`We were not able to determine your exact location`);
    }
)

//------------------------------------------------------EVENT LISTENERS------------------------------------------------------------------------

// Display Marker
form.addEventListener('submit', (event) => { // Event listener for when user hits enter button when filling out a form which will submit the form
        event.preventDefault(); // Prevents page reloading when hitting enter button

        // Clear input fields
        inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value = '';

        console.log(mapEvent);
        const { lat, lng } = mapEvent.latlng;

        L.marker([lat, lng])  // Add destructured lat and lng variables from mapEvent.latlng object key above.
        .addTo(map) 
        .bindPopup(L.popup({
            maxWidth: 250,
            minWidth: 100,
            autoClose: false,
            closeOnClick: false,
            className: 'running-popup'
        }))
        .setPopupContent('Workout')
        .openPopup();
})

inputType.addEventListener('change', () => { // Anytime there is a change to the Type in our form with selections Cycling and Running then the fourth input box will change from either Elev Gain with meters as the placeholder or it will change to Cadence with step/min as the placeholder when the Type is changed to Running 
    inputElevation.closest('.form__row').classList.toggle('form__row--hidden'); // Toggles the fourth input to show Elev Gain with meters as placeholder. When Cycling is selected as the Type this will show and when Running is selected as Type this will be hidden and the Cadence with step/min as placeholder will show.
    inputCadence.closest('.form__row').classList.toggle('form__row--hidden'); // Toggles the fourth input to show Cadence with step/min as placeholder. When Running is selected as the Type this will show and when Cycling is selected as Type this will be hidden and the Elev Gain with meters as placeholder will show.
})

